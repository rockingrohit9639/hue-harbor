generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String   @db.ObjectId
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    websites      Website[]
    Palette       Palette[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Website {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    url         String

    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String   @db.ObjectId
    palette     Palette? @relation(fields: [paletteId], references: [id])
    paletteId   String?  @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum PaletteVisibility {
    PUBLIC
    PRIVATE
}

model Palette {
    id              String  @id @default(auto()) @map("_id") @db.ObjectId
    name            String
    backgroundColor String?
    slug            String

    // There can be two types of variables,
    // 1. Color -> as the name suggest
    // 2. Number -> can be used for borderRadius or fontSize
    variables Json[] @default([])

    // PUBLIC -> These palettes can be shared in the community and other can also use them in their projects
    // PRIVATE -> A palette is private to a user and he/she can use it in their own websites only
    visibility PaletteVisibility @default(PRIVATE)

    createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String    @db.ObjectId
    websites    Website[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name, slug])
}
